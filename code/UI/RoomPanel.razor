@using System
@using Sandbox
@using ShartCoding.GameMaker
@using ShartCoding.GameMaker.Engine
@using ShartCoding.UI.CodeTypePanels
@inherits Sandbox.UI.Panel

<root class="window window-column">
	<div class="header">
		<h4 style="flex-grow: 1">Room "@Room.Name"</h4>
		<ToggleButton Pressed:bind="@_hidden" IconPressed="material-symbols:expand-content" IconReleased="material-symbols:collapse-content"/>
	</div>

	<div class="body column @( _hidden ? "hidden" : "" )">
		<div class="block column">
			<div class="header">
				<h4 style="flex-grow: 1">Properties</h4>
				<ToggleButton Pressed:bind="@_propertiesHidden" IconPressed="material-symbols:expand-content" IconReleased="material-symbols:collapse-content"/>
			</div>
			<div class="column @( _propertiesHidden ? "hidden" : "" )">
				<div class="row">Name: <StringPanel Text:bind="@( Room.Name )"/></div>
			</div>
			<div class="column @( _propertiesHidden ? "hidden" : "" )">
				<div class="row">Sun angle: <AnglesPanel Angles:bind="@( Room.SunAngles )"/></div>
			</div>
		</div>
		<div class="block column">
			<div class="header">
				<h4 style="flex-grow: 1">Objects</h4>
				<button class="square" onclick="@( () => AddRoomObjectDialog() )">
					<iconify icon="material-symbols:person-add"/>
				</button>
				<ToggleButton Pressed:bind="@_objectsHidden" IconPressed="material-symbols:expand-content" IconReleased="material-symbols:collapse-content"/>
			</div>
			<div class="column room-objects @( _objectsHidden ? "hidden" : "" )">
				@foreach ( var roomObject in Room.RoomObjects )
				{
					@* NOTE: ondblclick from HTML is called ondoubleclick in s&box *@
					<div class="actor @( IsRoomObjectSelected( roomObject ) ? "selected" : "" )"
					     onclick="@( () => GameMakerComponent.EditorSelectRoomObject( roomObject ) )"
					     ondoubleclick="@( () => GameMakerComponent.EditorSetCameraTarget( roomObject ) )">
						@roomObject.Name
					</div>
				}
			</div>
		</div>
	</div>
</root>

<style>
	RoomPanel {
		gap: 10px;
	
		button.square {
			width: 32px;
		}
	
		.room-objects {
			justify-content: flex-start;
			align-items: stretch;
		
			.actor {
				padding: 5px;
				
				border-radius: 5px;
			
				background-color: rgba(0, 0, 0, 0.25);
			
				&.selected {
					background-color: rgba(76,177,255, 0.25);
				}
			}
		}
	}
</style>

@code {

	public GameMakerComponent GameMakerComponent { get; set; }
	public Room Room { get; set; }

	private bool _hidden;
	private bool _propertiesHidden;
	private bool _objectsHidden;

	private bool IsRoomObjectSelected( RoomObject roomObject ) => GameMakerComponent.EditorCurrentSelected != null
	                                                              && GameMakerComponent.EditorCurrentSelected.RoomObject == roomObject;

	private void AddRoomObjectDialog()
	{
		// TODO: an actual dialog
		Room.Add( new RoomObject(
			BBox.FromPositionAndSize( Vector3.Zero, 100 ).RandomPointInside,
			Random.Shared.FromList( GameMakerComponent.Current.Actors ) ) );
	}

	protected override int BuildHash() => HashCode.Combine( _hidden, _propertiesHidden, _objectsHidden,
		Room, GameMakerComponent.EditorCurrentSelected );

}
