@using System
@using Sandbox
@using ShartCoding.GameMaker.Engine
@using Sandbox.UI
@inherits Sandbox.UI.Panel

<root class="@( FreeCam ? "" : "pointer-events" )">
	<div class="editor window window-column @( _hidden ? "closed" : "open" )">
		<div class="header">
			<h4 style="flex-grow: 1">Project settings</h4>
			<button class="play-stop square @( GameMakerComponent.Playing ? "danger" : "accent" )" onclick="@TogglePlaying">
				<iconify icon="@( GameMakerComponent.Playing ? "material-symbols:stop" : "material-symbols:play-arrow" )"/>
			</button>
			<ToggleButton Pressed:bind="@_hidden" IconPressed="material-symbols:expand-content" IconReleased="material-symbols:collapse-content"/>
		</div>
		<div class="body">
			<div class="row">
				<label>Project name: </label>
				@* TODO: binding *@
				<TextEntry style="flex-grow: 1" Text="@( GameMakerComponent.Current.Description.Name )" OnTextEdited="@( SetName )"/>
			</div>
		</div>
	</div>

	@* TODO: make them float like real windows *@
	@* TODO: @if causes these blocks to lose their state (including the _hidden flag), should just hide them instead *@
	@if ( !GameMakerComponent.Playing )
	{
		@if ( GameMakerComponent.CurrentEditorRoom != null )
		{
			<RoomPanel GameMakerComponent="@GameMakerComponent" Room="@GameMakerComponent.CurrentEditorRoom"/>
		}

		@if ( GameMakerComponent.EditorCurrentSelected != null )
		{
			<RoomObjectPanel RoomObject="@GameMakerComponent.EditorCurrentSelected.RoomObject"/>

			@if ( GameMakerComponent.EditorCurrentSelected.RoomObject.Actor != null )
			{
				<ActorPanel Actor="@GameMakerComponent.EditorCurrentSelected.RoomObject.Actor"/>
			}
		}
	}
</root>

<style lang="scss">
	ProjectEditorPanel {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		
		align-items: flex-start;
		justify-content: flex-start;
		flex-direction: column;
		gap: 20px;
		
		padding: 10px;
		
		pointer-events: none;
		&.pointer-events {
			pointer-events: all;
		}
		
		/* TODO: turn into an actual windowing system */
		> .window.editor {
			flex-shrink: 0;
			
			.body {
				flex-grow: 1;
			
				flex-direction: column;
				flex-wrap: nowrap;
				
				justify-content: flex-start;
				align-items: stretch;
			}
			
			&.open {
				min-width: 25vw;
			}
			
			&.closed {
				.body {
					display: none;
				}
			}
		}
	}
</style>

@code {

	public GameMakerComponent GameMakerComponent { get; set; }

	private bool FreeCam => GameMakerComponent.EditorCamera.Captured && !GameMakerComponent.Playing;

	private bool _hidden;

	private void TogglePlaying()
	{
		if ( GameMakerComponent.Playing )
			GameMakerComponent.Stop();
		else
			GameMakerComponent.Start();
	}

	private void SetName( string newName )
	{
		GameMakerComponent.Current.Description.Name = newName;
	}

	protected override void OnMouseDown( MousePanelEvent e )
	{
		if ( e.MouseButton == MouseButtons.Right )
		{
			GameMakerComponent.EditorCamera.Captured = true;
			StateHasChanged();
		}

		// base.OnMouseDown( e );
	}

	protected override void OnClick( MousePanelEvent e )
	{
		base.OnClick( e );

		if ( e.Target != this )
			return;

		InputFocus.Clear( null );
		GameMakerComponent.EditorRay = Scene.Camera.ScreenPixelToRay( MousePosition );
	}

	protected override int BuildHash() => HashCode.Combine( GameMakerComponent.Playing, _hidden, FreeCam, GameMakerComponent.EditorCurrentSelected );

}
